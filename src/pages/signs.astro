---
import "toastify-js/src/toastify.css";

import { basename } from "node:path";

import Base from "@/layouts/base.astro";
import { Image } from "astro:assets";

const Locators = import.meta.glob("@/assets/*.loc", {
    query: "?raw",
    import: "default",
});

const ImageAssets: { [i: string]: ImageMetadata } = import.meta.glob(
    "@/assets/*.{png,jpg}",
    {
        eager: true,
        import: "default",
    },
);

enum SignGroups {
    Overlay,
    Default,
    White,
    Green,
    Blue,
    Red,
    Black,
    WhiteStartCpFinish,
    BlackStartCpFinish,
}

const signs: any[] = [];

for (const locator in Locators) {
    await Locators[locator]().then(async (loc) => {
        const name = basename(locator.slice(0, -8))
            .split("_")
            .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
            .join(" ");

        const src = locator.slice(0, -4);

        let group = SignGroups.Default;

        if (ImageAssets[src].format === "png") {
            group = SignGroups.Overlay;
        } else if (/^black\s{1}\S*$/i.test(name)) {
            group = SignGroups.BlackStartCpFinish;
        } else if (/^white\s{1}\S*$/i.test(name)) {
            group = SignGroups.WhiteStartCpFinish;
        }

        const colorMatch = /(white|green|blue|red|black)$/i.exec(name);
        if (colorMatch) {
            group = SignGroups[colorMatch[1] as keyof typeof SignGroups];
        }

        signs.push({
            name,
            src,
            loc,
            group,
        });
    });
}
---

<Base>
    <div class="signs">
        <div>Base</div>
        <div>Overlay</div>
        <div class="base">
            {
                signs
                    .filter((sign) => sign.group !== SignGroups.Overlay)
                    .sort((a, b) =>
                        a.group < b.group ? -1 : a.name < b.name ? -1 : 1,
                    )
                    .map((sign) => (
                        <button type="button" data-url={sign.loc} class="sign">
                            <Image
                                src={ImageAssets[sign.src]}
                                alt={sign.name}
                            />
                            <div class="name">{sign.name}</div>
                        </button>
                    ))
            }
        </div>
        <div class="overlay">
            {
                signs
                    .filter((sign) => sign.group === SignGroups.Overlay)
                    .map((sign) => (
                        <button
                            type="button"
                            data-url={sign.loc}
                            class="sign sign-overlay"
                        >
                            <Image
                                src={ImageAssets[sign.src]}
                                alt={sign.name}
                            />
                            <div class="name">{sign.name}</div>
                        </button>
                    ))
            }
        </div>
    </div>
</Base>

<style type="text/css">
    .filters {
        display: flex;
        justify-content: space-around;
    }

    .signs {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        text-align: center;
        gap: 10px;
    }

    .signs > * {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-content: flex-start;
        gap: 5px;
        width: calc(50% - 5px);
    }

    .sign {
        width: 300px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        border-radius: 5px;
        border: 1px solid gray;
    }

    .sign:hover {
        border-color: white;
    }

    .sign img {
        width: 100%;
        height: auto;
    }
</style>

<script>
    import Toastify from "toastify-js";

    const signs = document.querySelectorAll(".sign") as NodeListOf<HTMLElement>;
    signs.forEach((sign) => {
        sign.addEventListener("click", () => {
            if (sign.dataset.url) {
                navigator.clipboard.writeText(sign.dataset.url);

                Toastify({
                    text: "Copied",
                    duration: 1000,
                    position: "center",
                    style: {
                        background:
                            "linear-gradient(to top left, #000000, #00004a)",
                    },
                }).showToast();
            }
        });
    });
</script>
