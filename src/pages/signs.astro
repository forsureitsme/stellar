---
import "toastify-js/src/toastify.css";

import { basename } from "node:path";

import Base from "@/layouts/base.astro";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

const Locators = import.meta.glob("@/assets/*.loc", {
    query: "?raw",
    import: "default",
});

const ImageAssets: { [i: string]: ImageMetadata } = import.meta.glob(
    "@/assets/*.{png,jpg}",
    {
        eager: true,
        import: "default",
    },
);

enum SignGroup {
    OverlayLight,
    OverlayDark,
    Default,
    White,
    Green,
    Blue,
    Red,
    Black,
    WhiteStartCpFinish,
    BlackStartCpFinish,
}

const getLocatorGroup = ({ src, name }: Record<string, string>) => {
    if (ImageAssets[src].format === "png") {
        if (/black$/i.test(name)) {
            return SignGroup.OverlayDark;
        } else {
            return SignGroup.OverlayLight;
        }
    } else if (/^black\s{1}\S*$/i.test(name)) {
        return SignGroup.BlackStartCpFinish;
    } else if (/^white\s{1}\S*$/i.test(name)) {
        return SignGroup.WhiteStartCpFinish;
    }

    const colorMatch = /(white|green|blue|red|black)$/i.exec(name);
    if (colorMatch) {
        return SignGroup[colorMatch[1] as keyof typeof SignGroup];
    }

    return SignGroup.Default;
};

const isOverlaySignGroup = (group: SignGroup) => {
    return [SignGroup.OverlayLight, SignGroup.OverlayDark].includes(group);
};

const signs: any[] = [];

for (const locator in Locators) {
    await Locators[locator]().then(async (loc) => {
        const name = basename(locator.slice(0, -8))
            .split("_")
            .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
            .join(" ");

        const src = locator.slice(0, -4);

        const group = getLocatorGroup({ src, name });

        signs.push({
            loc,
            name,
            src,
            group,
        });
    });
}

const backgroundAssets = Object.entries(ImageAssets);
const backgroundSigns: { [key in SignGroup]?: ImageMetadata } = {
    [SignGroup.OverlayLight]: backgroundAssets.find(
        ([name]) => "black.jpg" === basename(name),
    )?.[1],
    [SignGroup.OverlayDark]: backgroundAssets.find(
        ([name]) => "white.jpg" === basename(name),
    )?.[1],
};
---

<Base>
    <div class="signs">
        <div>Base</div>
        <div>Overlay</div>
        <div class="base">
            {
                signs
                    .filter((sign) => !isOverlaySignGroup(sign.group))
                    .sort((a, b) =>
                        a.group < b.group ? -1 : a.name < b.name ? -1 : 1,
                    )
                    .map((sign) => (
                        <button type="button" data-url={sign.loc} class="sign">
                            <Image
                                src={ImageAssets[sign.src]}
                                alt={sign.name}
                            />
                            <div class="name">{sign.name}</div>
                        </button>
                    ))
            }
        </div>
        <div class="overlay">
            {
                signs
                    .filter((sign) => isOverlaySignGroup(sign.group))
                    .sort((a, b) =>
                        a.group < b.group ? -1 : a.name < b.name ? -1 : 1,
                    )
                    .map((sign) => (
                        <button
                            type="button"
                            data-url={sign.loc}
                            class="sign sign-overlay"
                        >
                            <Image
                                src={backgroundSigns[sign.group]}
                                alt="Background for sign"
                                class="sign-background"
                            />
                            <Image
                                src={ImageAssets[sign.src]}
                                alt={sign.name}
                            />
                            <div class="name">{sign.name}</div>
                        </button>
                    ))
            }
        </div>
    </div>
</Base>

<style type="text/css">
    .filters {
        display: flex;
        justify-content: space-around;
    }

    .signs {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        text-align: center;
        gap: 10px;
    }

    .signs > * {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-content: flex-start;
        gap: 5px;
        width: calc(50% - 5px);
    }

    .sign {
        width: 300px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        border-radius: 5px;
        border: 1px solid gray;
        position: relative;
    }

    .sign:hover {
        border-color: white;
    }

    .sign img {
        width: 100%;
        height: auto;
    }

    .sign-background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: auto;
        z-index: -1;
    }
</style>

<script>
    import Toastify from "toastify-js";

    const signs = document.querySelectorAll(".sign") as NodeListOf<HTMLElement>;
    signs.forEach((sign) => {
        sign.addEventListener("click", () => {
            if (sign.dataset.url) {
                navigator.clipboard.writeText(sign.dataset.url);

                Toastify({
                    text: "Copied",
                    duration: 1000,
                    position: "center",
                    style: {
                        background:
                            "linear-gradient(to top left, #000000, #00004a)",
                    },
                }).showToast();
            }
        });
    });
</script>
